var.test.clust(read~gender, id=sch.id, data=screen8)
t.test.clust(x=screen8$read, idx=screen8$sch.id, mu=.65)
library(htest.clust)
head(screen8)
t.test.clust(math~gender, id=sch.id, data=screen8)
levene.test.clust(math~gender, id=sch.id, data=screen8, center="mean", trim=.1)
levene.test.clust(math~gender, id=sch.id, data=screen8)
## Check
devtools::check()
library("devtools")
library("roxygen2")
## Check
devtools::check()
check()
library(htest.clust)
head(screen8)
###   PROPORTION TEST
screen8$math.p <- 1*(screen8$math>=65)
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id, var="emp")
###   PROPORTION TEST
screen8$math.p <- 1*(screen8$math>=55)
###   CHI SQUARED INDEPENDENCE
chisqtestClust(x=screen8$activity, y=screen8$gender, id=screen8$sch.id)
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id, var="emp")
###   MCNEMAR
screen8$low.start <- 1*(screen8$qfit.s=='Q1')
chisqtestClust(x=screen8$gender, y=screen8$qfit.s, id=screen8$sch.id)
chisqtestClust(x=screen8$gender, y=screen8$low.start, id=screen8$sch.id)
###   PROPORTION TEST
screen8$math.p <- 1*(screen8$math>=65)
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id, var="emp")
tapply(screen8$math.p, list(screen8$gender), mean)
tapply(screen8$math.p, list(screen8$sch.id), mean)
tapply(screen8$math.p, list(screen8$sch.id, screen8$gender), mean)
colMeans(tapply(screen8$math.p, list(screen8$sch.id, screen8$gender), mean))
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id, var="emp")
table(screen8$qfit)
screen8$qfit2
screen8$qfit.s
table(screen8$qfit.s)
table(screen8$qfit)
ttestClust(x=screen8$math, y = screen8$read, idx=screen8$sch.id)
ttestClust(x=screen8$math, y = screen8$read, idx=screen8$sch.id, paired = TRUE)
tmp <- screen8$math - screen8$read
ttestClust(x= tmp, idx=screen8$sch.id)
ttestClust(screen8$math ~ screen8$gender, id=screen8$sch.id)
ttestClust(screen8$math ~ 1, id=screen8$sch.id)
###   Paired test: test if math and reading scores are equal
ttestClust(x = screen8$math, y= screen8$read, idx = screen8$sch.id)
###   Paired test: test if math and reading scores are equal
ttestClust(x = screen8$math, y= screen8$read, idx = screen8$sch.id, paired= TRUE)
###   Paired test: test if math and reading scores are equal
ttestClust(x = screen8$math, y = screen8$read, idx = screen8$sch.id, paired = TRUE, mu = 5)
###   Paired test: test if math and reading scores are equal
ttestClust(x = screen8$math, y = screen8$read, idx = screen8$sch.id, paired = TRUE, mu = 11)
###   Paired test: test if math and reading scores are equal
ttestClust(x = screen8$math, y = screen8$read, idx = screen8$sch.id, paired = TRUE, mu = 11)
###   Paired test: test if math and reading scores are equal
ttestClust(x = screen8$math, y = screen8$read, idx = screen8$sch.id, paired = TRUE, mu = 10)
ttestClust(x = screen8$math, y = screen8$read, idx = screen8$sch.id,
paired = TRUE, mu = 10)
?oneway.test
?onewaytestClust
?var.test
?vartestClust
?levene.test
library(cars)
library(var)
library(car)
install.packages("car")
library(car)
?levene.test
?leveneTest
###   PROPORTION TEST
screen8$math.p <- 1*(screen8$math>=65)
## Is math compentancy independent of gender?
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id)
?chisqtestClust
proptestClust(x = screen8$math.p, id = screen8$sch.id, p = .75, alternative = "greater")
proptestClust(x = screen8$math.p, id = screen8$sch.id, p = .75,
alternative = "greater")
?glm
library(htest.clust)
###   Signed rank: difference in math and reading scores center around 10
wilcoxtestClust(x = screen8$math, y = screen8$read,
idx = screen8$sch.id, mu = 10, paired = TRUE)
library(htest.clust)
head(screen8)
table(screen8$sch.id, screen8$activity)
screen8$tmp <- ifelse(screen8$activity=="sports", "sports", "other")
head(screen8)
str(screen8)
screen8$tmp <- as.factor(screen8$tmp)
str(screen8)
head(screen8)
table(sreen8$sch.id, screen8$tmp)
table(screen8$sch.id, screen8$tmp)
?wilcoxtestClust
wilcoxtestClust(math ~ activity, id=sch.id, data=screen8)
wilcoxtestClust(math ~ tmp, id=sch.id, data=screen8)
rm(list=ls())
head(screen8)
tdat <- subset(screen8, sch.id < 11)
head(tdat)
dim(tdat)
?subset
tdat2 <- tdat[-(tdat$sch.id==1 & tdat$gender =="F"),]
head(tdat2)
dim(tdat2)
dim(tdat)
tdat2 <- tdat[-(tdat$sch.id==1 && tdat$gender =="F"),]
dim(tdat2)
head(tedat2)
head(tdat2)
tdat2 <- tdat[-(tdat$sch.id==1 & tdat$gender =="F"),]
dim(tdat2)
table(tdat2$sch.id, tdat2$gender)
tdat2 <- tdat[19:nrow(tdat),]
table(tdat2$sch.id, tdat2$gender)
tdat2 <- tdat[20:nrow(tdat),]
table(tdat2$sch.id, tdat2$gender)
boys <- subset(tdat2, gender =="M")
girls <- subset(tdat2, gender =="F")
x <- boys$math
y <- girls$math
idx <- boys$sch.id
idy <- girls$sch.id
## Set up data for rank sum tests
## Remove missing values, set up in data frame with ID, X, Grp (required by Dutta/Datta code)
xok <- stats::complete.cases(x, idx)
yok <- stats::complete.cases(y, idy)
x <- x[xok]
idx <- factor(as.factor(idx[xok]), levels=unique(as.factor(idx[xok])))
y <- y[yok]
idy <- factor(as.factor(idy[yok]), levels=unique(as.factor(idy[yok])))
xdat <- data.frame(idx, x, rep(0,length(x)))  ## numeric group variable of 0/1 required by Dutta/Datta code
ydat <- data.frame(idy, y, rep(1,length(y)))
colnames(xdat) <- c("ID", "X", "grp")
colnames(ydat) <- c("ID", "X", "grp")
dat <- rbind(xdat, ydat)
dat[,1] <- as.numeric(dat[,1])  ## Dutta/Datta code uses numeric IDs
dat <- dat[with(dat, order(ID)),]
head(dat)
dat
head(dat)
table(dat$ID, dat$grp)
library(htest.clust)
tdat <- subset(screen8, sch.id<11)
table(tdat$sch.id, tdat$gender)
tdat2 <- tdat[20:nrow(tdat),]
boys <- subset(tdat2, gender=="M")
girls <- subset(tdat2, gender=="F")
x <- boys$math
idx <- boys$sch.id
y <- girls$math
idy <- girls$sch.id
## Set up data for rank sum tests
## Remove missing values, set up in data frame with ID, X, Grp (required by Dutta/Datta code)
xok <- stats::complete.cases(x, idx)
yok <- stats::complete.cases(y, idy)
x <- x[xok]
idx <- factor(as.factor(idx[xok]), levels=unique(as.factor(idx[xok])))
y <- y[yok]
idy <- factor(as.factor(idy[yok]), levels=unique(as.factor(idy[yok])))
xdat <- data.frame(idx, x, rep(0,length(x)))  ## numeric group variable of 0/1 required by Dutta/Datta code
ydat <- data.frame(idy, y, rep(1,length(y)))
colnames(xdat) <- c("ID", "X", "grp")
colnames(ydat) <- c("ID", "X", "grp")
dat <- rbind(xdat, ydat)
dat[,1] <- as.numeric(dat[,1])  ## Dutta/Datta code uses numeric IDs
dat <- dat[with(dat, order(ID)),]
head(dat)
## only tests if distribution of x and y are equal (can't test if the shift is different than zero)
mu <- 0
m <- length(unique(dat[,1]))
dat
head(dat)
colnames(dat)
X <- dat$X
Cluster <- dat$ID
grp <- dat$grp
#####calculate quantity 2 (using the pooled estimate of F)
n<-length(X)
F.hat<-numeric(n)
for (i in 1:n){
F.hat[i]<-(sum(X<=X[i])+sum(X<X[i]))/(2*n)
}
F.hat
#####calculate quantity 1 (using ECD-F for each cluster)
#### M is No. of clusters, n is No. of observations
M<-length(unique(Cluster))
n.i<-table(Cluster)
F.prop<-numeric(n)
for(ii in 1:n){
F.j<-numeric(M)
for (i in 1:M){
F.j[i]<-(sum(X[Cluster==i]<X[ii])+0.5*sum(X[Cluster==i]==X[ii]))/(n.i[i])
}
F.prop[ii]<-sum(F.j[-Cluster[ii]])
}
F.prop
F.j
###########calculate S=E(W*|X,g)
a<-numeric(M)
b<-1+F.prop
for (i in 1:M){
a[i]<-sum((grp[Cluster==i]*b[Cluster==i])/(n.i[i]))
}
c<-1/(M+1)
S<-c*sum(a)
#########Calculate E(S)=E(W*)
n.i1<-table(Cluster[grp==1])
d<-n.i1/n.i
E.S<-(1/2)*sum(d)
#######Calculate estimate of variance of S
W.hat<-numeric(M)        #####first calculate W.hat for each cluster
a<-n.i1/n.i
for (i in 1:M){
b<-1/(n.i[i]*(M+1))
c<-(grp[Cluster==i])*(M-1)
d<-sum(a[-i])
W.hat[i]<-b*sum((c-d)*F.hat[Cluster==i])
}
a<-n.i1/n.i
E.W<-(M/(2*(M+1)))*(a-sum(a)/M)    ##second, calculate E(W)
var.s<-sum((W.hat-E.W)^2) #calculate var(s)
stat<-(S-E.S)/sqrt(var.s)   #calculate the test statistic
var.s
stat
#p.value<-2*pnorm(abs(stat),lower.tail=F)
#list(S=S,E.S=E.S,Var.S=var.s,z.stat=stat,p.value=p.value)
stat
Z <- clus.rank.sum(dat$ID, dat$X, dat$grp)
W.hat
E.W
n.i
table(tmp2$cl.id)
table(tmp2$sch.id)
head(tmp)
head(tmp2)
head(dat2)
table(tdat2$sch.id)
n.i
n.i1
boys <- subset(tdat2, gender =="F")
girls <- subset(tdat2, gender =="M")
x <- boys$math
idx <- boys$sch.id
y <- girls$math
idy <- girls$sch.id
## Set up data for rank sum tests
## Remove missing values, set up in data frame with ID, X, Grp (required by Dutta/Datta code)
xok <- stats::complete.cases(x, idx)
yok <- stats::complete.cases(y, idy)
x <- x[xok]
idx <- factor(as.factor(idx[xok]), levels=unique(as.factor(idx[xok])))
y <- y[yok]
idy <- factor(as.factor(idy[yok]), levels=unique(as.factor(idy[yok])))
xdat <- data.frame(idx, x, rep(0,length(x)))  ## numeric group variable of 0/1 required by Dutta/Datta code
ydat <- data.frame(idy, y, rep(1,length(y)))
colnames(xdat) <- c("ID", "X", "grp")
colnames(ydat) <- c("ID", "X", "grp")
dat <- rbind(xdat, ydat)
dat[,1] <- as.numeric(dat[,1])  ## Dutta/Datta code uses numeric IDs
dat <- dat[with(dat, order(ID)),]
head(dat)
tail(dat)
table(dat$ID, dat$grp)
#####calculate quantity 2 (using the pooled estimate of F)
n<-length(X)
F.hat<-numeric(n)
for (i in 1:n){
F.hat[i]<-(sum(X<=X[i])+sum(X<X[i]))/(2*n)
}
#####calculate quantity 1 (using ECD-F for each cluster)
#### M is No. of clusters, n is No. of observations
M<-length(unique(Cluster))
n.i<-table(Cluster)
F.prop<-numeric(n)
for(ii in 1:n){
F.j<-numeric(M)
for (i in 1:M){
F.j[i]<-(sum(X[Cluster==i]<X[ii])+0.5*sum(X[Cluster==i]==X[ii]))/(n.i[i])
}
F.prop[ii]<-sum(F.j[-Cluster[ii]])
}
###########calculate S=E(W*|X,g)
a<-numeric(M)
b<-1+F.prop
for (i in 1:M){
a[i]<-sum((grp[Cluster==i]*b[Cluster==i])/(n.i[i]))
}
c<-1/(M+1)
S<-c*sum(a)
#########Calculate E(S)=E(W*)
n.i1<-table(Cluster[grp==1])
n.i1
#########Calculate E(S)=E(W*)
n.i1<-table(Cluster[grp==1])
n.i1
d<-n.i1/n.i
d
head(dat)
Cluster <- dat$ID
X <- dat$X
grp <- dat$grp
#####calculate quantity 2 (using the pooled estimate of F)
n<-length(X)
F.hat<-numeric(n)
for (i in 1:n){
F.hat[i]<-(sum(X<=X[i])+sum(X<X[i]))/(2*n)
}
#####calculate quantity 1 (using ECD-F for each cluster)
#### M is No. of clusters, n is No. of observations
M<-length(unique(Cluster))
n.i<-table(Cluster)
F.prop<-numeric(n)
for(ii in 1:n){
F.j<-numeric(M)
for (i in 1:M){
F.j[i]<-(sum(X[Cluster==i]<X[ii])+0.5*sum(X[Cluster==i]==X[ii]))/(n.i[i])
}
F.prop[ii]<-sum(F.j[-Cluster[ii]])
}
n.i
F.prop
n.i
###########calculate S=E(W*|X,g)
a<-numeric(M)
b<-1+F.prop
for (i in 1:M){
a[i]<-sum((grp[Cluster==i]*b[Cluster==i])/(n.i[i]))
}
c<-1/(M+1)
S<-c*sum(a)
c
S
#########Calculate E(S)=E(W*)
n.i1<-table(Cluster[grp==1])
n.i1
d<-n.i1/n.i
n.i1
n.i
n.i1
table(Cluster, grp)
n.i1
table(Cluster, grp)[,2]
n.i1
#########Calculate E(S)=E(W*)
#n.i1<-table(Cluster[grp==1])
n.i1 <- table(Cluster, grp)[,2]
d<-n.i1/n.i
d
E.S<-(1/2)*sum(d)
E.S
#######Calculate estimate of variance of S
W.hat<-numeric(M)        #####first calculate W.hat for each cluster
a<-n.i1/n.i
a
b<-1/(n.i[i]*(M+1))
b
for (i in 1:M){
b<-1/(n.i[i]*(M+1))
c<-(grp[Cluster==i])*(M-1)
d<-sum(a[-i])
W.hat[i]<-b*sum((c-d)*F.hat[Cluster==i])
}
W.hat
n.i
#########Calculate E(S)=E(W*)
#n.i1<-table(Cluster[grp==1])
n.i1 <- table(Cluster, grp)[,2]
n.i1
d<-n.i1/n.i
E.S<-(1/2)*sum(d)
#######Calculate estimate of variance of S
W.hat<-numeric(M)        #####first calculate W.hat for each cluster
a<-n.i1/n.i
for (i in 1:M){
b<-1/(n.i[i]*(M+1))
c<-(grp[Cluster==i])*(M-1)
d<-sum(a[-i])
W.hat[i]<-b*sum((c-d)*F.hat[Cluster==i])
}
a<-n.i1/n.i
W.hat
n.i1
(n.i[i]*(M+1))
i <- 1
(n.i[i]*(M+1))
n.i[i]
a<-n.i1/n.i
E.W<-(M/(2*(M+1)))*(a-sum(a)/M)    ##second, calculate E(W)
E.W
var.s<-sum((W.hat-E.W)^2) #calculate var(s)
stat<-(S-E.S)/sqrt(var.s)   #calculate the test statistic
stat
W.hat
a
b
W.hat
n.i1
sum(a)
(a-sum(a)/M)
(M/(2*(M+1)))
library(htestClust)
library(htest.clust)
?chisqtestClust
?proptestClust
?chisqtestClust
chisqtestClust(x=screen8$gender, y=screen8$low.start, id=screen8$sch.id)
head(screen8)
screen8$low.start
## Is math compentancy independent of gender?
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id)
chisqtestClust(x=screen8$gender, y=screen8$low.start, id=screen8$sch.id)
## Is math compentancy independent of gender?
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id)
library(htest.clust)
head(screen8)
?proptestClust
?chisqtestClust
chisqtestClust(x=screen8$gender, y=screen8$math.p, id=screen8$sch.id)
chisqtestClust(screen8$gender, y = screen8$activity, id = screen8$sch.id)
chisqtestClust(screen8$math.p, y = screen8$activity, id = screen8$sch.id)
y <- screen8$math.p
y
?chisq.test
library(htest.clust)
chisq.test(x = screen8$gender, y = screen8$math.p)
## Math compentancy determined by score >=65
screen8$math.p <- 1*(screen8$math>=65)
chisq.test(x = screen8$gender, y = screen8$math.p)
###   CHI SQUARED INDEPENDENCE
chisqtestClust(x=screen8$activity, y=screen8$gender, id=screen8$sch.id)
###   CHI SQUARED INDEPENDENCE
tt <- chisqtestClust(x=screen8$activity, y=screen8$gender, id=screen8$sch.id)
tt$observed
tt$expected
###   CHI SQUARED INDEPENDENCE
marg.indep <- chisqtestClust(x=screen8$activity, y=screen8$gender, id=screen8$sch.id)
marg.indep
marg.indep$observed
marg.indep$expected
act.test$expected
act.test <- chisqtestClust(act.table)
act.test$observed
act.test <- chisqtestClust(act.table)
act.table <- table(screen8$sch.id, screen8$activity)
act.test <- chisqtestClust(act.table)
act.test$observed
act.test$expected
###   Test of variance
boys <- subset(screen8, gender=='M')
girls <- subset(screen8, gender=='F')
vartestClust(x = boys$math, y = girls$math, idx = boys$sch.id,
idy = girls$sch.id)
t.test(x = screen8$math, mu = 65)
###   TEST OF MEANS
###   One-sample: Test if average math score is equal to 65
ttestClust(x = screen8$math, idx = screen8$sch.id, mu = 65)
###   TEST OF MEANS
###   One-sample: Test if average math score is equal to 65
ttestClust(x = screen8$math, idx = screen8$sch.id, mu = 70)
t.test(x = screen8$math, mu = 70)
t.test(x = screen8$math, mu = 65)
t.test(x = screen8$math, mu = 65)
library(geepack)
geeglm(math ~ 1, id = sch.id, data = screen8, corstr = "exchangeable")
gee.mod <- geeglm(math ~ 1, id = sch.id, data = screen8, corstr = "exchangeable")
summary(gee.mod)
###   TEST OF MEANS
###   One-sample: Test if average math score is equal to 65
ttestClust(x = screen8$math, idx = screen8$sch.id, mu = 65)
gee.mod <- geeglm(math ~ 1, id = sch.id, data = screen8, corstr = "exchangeable")
summary(gee.mod)
t.test(x = screen8$math, mu = 65)
###   TEST OF MEANS
###   One-sample: Test if average math score is equal to 65
ttestClust(x = screen8$math, idx = screen8$sch.id, mu = 65)
t.test(x = screen8$math, mu = 65)
summary(gee.mod)
gee.mod
library(geepack)
gee.mod <- geeglm(math ~ 1, id = sch.id, data = screen8, corstr = "exchangeable")
summary(gee.mod)
library(htest.clust)
onewaytestClust(read ~ activity, id = sch.id, data=screen8)
72000/12
300*12
library(htest.clust)
###   CHI SQUARED INDEPENDENCE
marg.indep <- chisqtestClust(x=screen8$activity, y=screen8$gender,
id=screen8$sch.id)
72000/12
library(htest.clust)
?icstestClust
icstestClust(x = screen8$math, id=screen8$sch.id, B=10)
?chisqtestClust
library("devtools")
library("roxygen2")
setwd("C:/Users/konan/Desktop/School/UofL/1Dissertation/htest.clust/R Package/Package RedoneII")
build("htestClust")
install("htestClust")
## document the functions
## (only have to do this when I first add or update functions)
setwd("C:/Users/konan/Desktop/School/UofL/1Dissertation/htest.clust/R Package/Package RedoneII/htestClust")
document()
library("htestClust")
?cortestClust
?ttestClust
?onewaytestClust
